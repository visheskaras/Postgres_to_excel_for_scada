import flet as ft
from postgres_client import PostgreSQLClient, PostgreSQLConfig
from excel_exporter import ExcelExporter, ExcelExportConfig
from config_loader import ConfigLoader
import pandas as pd
import os
from datetime import datetime
from typing import List

class PostgreSQLExporterApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.config_loader = ConfigLoader()
        self.config = None
        self.available_views: List[str] = []
        
        # Refs
        self.db_host = ft.Ref[ft.TextField]()
        self.db_port = ft.Ref[ft.TextField]()
        self.db_name = ft.Ref[ft.TextField]()
        self.db_user = ft.Ref[ft.TextField]()
        self.db_password = ft.Ref[ft.TextField]()
        self.templates_folder = ft.Ref[ft.TextField]()
        self.output_folder = ft.Ref[ft.TextField]()
        self.view_dropdown = ft.Ref[ft.Dropdown]()
        self.status_text = ft.Ref[ft.Text]()
        self.progress_ring = ft.Ref[ft.ProgressRing]()
        self.export_button = ft.Ref[ft.ElevatedButton]()
        
        self.file_picker_templates = ft.FilePicker(on_result=self.pick_templates_folder_result)
        self.file_picker_output = ft.FilePicker(on_result=self.pick_output_folder_result)
        self.page.overlay.extend([self.file_picker_templates, self.file_picker_output])
        
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.page.title = "PostgreSQL View Exporter"
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.padding = 20
        self.page.scroll = ft.ScrollMode.AUTO
        
               
        self.page.add(
            ft.Text("PostgreSQL View ‚Üí Excel –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä", 
                   size=24, weight=ft.FontWeight.BOLD),
            
            ft.Divider(),
            
            ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL", 
                   size=18, weight=ft.FontWeight.BOLD),
            
            ft.Row([
                ft.TextField(ref=self.db_host, label="–•–æ—Å—Ç", width=200),
                ft.TextField(ref=self.db_port, label="–ü–æ—Ä—Ç", width=100),
            ]),
            
            ft.Row([
                ft.TextField(ref=self.db_name, label="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", width=200),
                ft.TextField(ref=self.db_user, label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", width=200),
            ]),
            
            ft.TextField(ref=self.db_password, label="–ü–∞—Ä–æ–ª—å", 
                        password=True, can_reveal_password=True, width=400),
            
            ft.Divider(),
            
            ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π", size=18, weight=ft.FontWeight.BOLD),
            
            ft.Row([
                ft.TextField(ref=self.templates_folder, label="–ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏", 
                            width=300, read_only=True),
                ft.ElevatedButton(
                    "–í—ã–±—Ä–∞—Ç—å",
                    on_click=lambda _: self.file_picker_templates.get_directory_path(
                        dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å —à–∞–±–ª–æ–Ω–∞–º–∏"
                    )
                )
            ]),
            
            ft.Row([
                ft.TextField(ref=self.output_folder, label="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                            width=300, read_only=True),
                ft.ElevatedButton(
                    "–í—ã–±—Ä–∞—Ç—å",
                    on_click=lambda _: self.file_picker_output.get_directory_path(
                        dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    )
                )
            ]),
            
            ft.Divider(),
            
            ft.Text("–í—ã–±–æ—Ä View –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", size=18, weight=ft.FontWeight.BOLD),
            
            ft.Dropdown(
                ref=self.view_dropdown,
                label="–í—ã–±–µ—Ä–∏—Ç–µ View",
                width=400,
                # options=self.get_view_options(),
                on_change=self.on_view_selected
            ),
            
            ft.Divider(),
            
            ft.ElevatedButton(
                ref=self.export_button,
                text="üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π View",
                on_click=self.export_data,
                style=ft.ButtonStyle(
                    bgcolor=ft.Colors.BLUE,
                    color=ft.Colors.WHITE,
                    padding=20
                ),
                width=400,
                disabled=True
            ),
            
            ft.Divider(),
            
            ft.Row([
                ft.ProgressRing(ref=self.progress_ring, visible=False, width=20, height=20),
                ft.Text(ref=self.status_text, size=16, selectable=True, 
                       text_align=ft.TextAlign.CENTER, expand=True),
            ], alignment=ft.MainAxisAlignment.CENTER),
            
            ft.Text("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è view –∏ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞–µ—Ç—Å—è –≤ —Ñ–∞–π–ª–µ .env", 
                   size=12, color=ft.Colors.GREY)
        )
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.load_configuration()
        self.view_dropdown.current.options =self.get_view_options()
        self.page.update()
    
    def load_configuration(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ .env —Ñ–∞–π–ª–∞"""
        try:
            self.config = self.config_loader.load_config()
            self.available_views = self.config_loader.get_available_views()
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.db_host.current.value = self.config.db_host
            self.db_port.current.value = self.config.db_port
            self.db_name.current.value = self.config.db_name
            self.db_user.current.value = self.config.db_user
            self.db_password.current.value = self.config.db_password
            self.templates_folder.current.value = self.config.templates_folder
            self.output_folder.current.value = self.config.output_folder
            
            self.update_status("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞", ft.Colors.GREEN)
            
        except Exception as e:
            self.update_status(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", ft.Colors.RED)
    
    def get_view_options(self) -> List[ft.dropdown.Option]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ü–∏–π –¥–ª—è dropdown —Å view"""
        options = []
        for view_name in self.available_views:
            view_config = self.config_loader.get_view_config(view_name)
            if view_config:
                options.append(ft.dropdown.Option(
                    key=view_name,
                    text=f"{view_name} ‚Üí {view_config.template_name}"
                ))
        return options
    
    def on_view_selected(self, e):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ view"""
        if self.view_dropdown.current.value:
            self.export_button.current.disabled = False
        else:
            self.export_button.current.disabled = True
        self.page.update()
    
    def pick_templates_folder_result(self, e: ft.FilePickerResultEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å —à–∞–±–ª–æ–Ω–∞–º–∏"""
        if e.path:
            self.templates_folder.current.value = e.path
            self.templates_folder.current.update()
    
    def pick_output_folder_result(self, e: ft.FilePickerResultEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if e.path:
            self.output_folder.current.value = e.path
            self.output_folder.current.update()
    
    def update_status(self, message: str, color: str = ft.Colors.BLACK, show_progress: bool = False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_text.current.value = message
        self.status_text.current.color = color
        self.progress_ring.current.visible = show_progress
        self.page.update()
    
    def export_data(self, e):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        selected_view = self.view_dropdown.current.value
        if not selected_view:
            self.update_status("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ View –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", ft.Colors.RED)
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        host = self.db_host.current.value.strip()
        port = self.db_port.current.value.strip()
        database = self.db_name.current.value.strip()
        username = self.db_user.current.value.strip()
        password = self.db_password.current.value.strip()
        templates_folder = self.templates_folder.current.value.strip()
        output_folder = self.output_folder.current.value.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not all([host, database, username, password]):
            self.update_status("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", ft.Colors.RED)
            return
        
        if not all([templates_folder, output_folder]):
            self.update_status("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", ft.Colors.RED)
            return
        
        try:
            self.update_status(f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É {selected_view}...", ft.Colors.ORANGE, True)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ view
            view_config = self.config_loader.get_view_config(selected_view)
            if not view_config:
                self.update_status(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è {selected_view} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", ft.Colors.RED)
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
            template_path = os.path.join(templates_folder, view_config.template_name)
            if not os.path.exists(template_path):
                self.update_status(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {view_config.template_name}", ft.Colors.RED)
                return
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            output_filename = self.config_loader.generate_output_filename(selected_view)
            output_path = os.path.join(output_folder, output_filename)
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —ç–∫—Å–ø–æ—Ä—Ç
            db_config = PostgreSQLConfig(
                host=host,
                database=database,
                user=username,
                password=password,
                port=int(port) if port else 5432
            )
            
            with PostgreSQLClient(db_config) as db_client:
                self.update_status(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {selected_view}...", ft.Colors.ORANGE, True)
                
                df = db_client.get_view_data(selected_view)
                if df is None or df.empty:
                    self.update_status(f"‚ö†Ô∏è {selected_view} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö", ft.Colors.ORANGE)
                    return
                
                self.update_status(f"‚è≥ –≠–∫—Å–ø–æ—Ä—Ç –≤ {output_filename}...", ft.Colors.ORANGE, True)
                
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                export_config = ExcelExportConfig(
                    template_path=template_path,
                    output_path=output_path,
                    sheet_name="Data",
                    start_row=self.config.default_start_row,
                    auto_adjust_columns=self.config.auto_adjust_columns,
                    preserve_formatting=self.config.preserve_formatting
                )
                
                exporter = ExcelExporter(export_config)
                result = exporter.export_dataframe_to_template(df, clear_existing=True, include_headers=False)
                
                if result["success"]:
                    self.update_status(
                        f"‚úÖ {selected_view} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n"
                        f"–§–∞–π–ª: {output_filename}\n"
                        f"–ó–∞–ø–∏—Å–µ–π: {result['records_count']}",
                        ft.Colors.GREEN
                    )
                else:
                    self.update_status(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {result['message']}", ft.Colors.RED)
                    
        except Exception as e:
            self.update_status(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", ft.Colors.RED)

def main(page: ft.Page):
    app = PostgreSQLExporterApp(page)

if __name__ == "__main__":
    ft.app(target=main)