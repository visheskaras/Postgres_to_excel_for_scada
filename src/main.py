import flet as ft
import os
import threading
from config_loader import ConfigLoader
from postgres_client import PostgreSQLClient, PostgreSQLConfig
from excel_exporter import ExcelExporter, ExcelExportConfig
import pandas as pd

def main(page: ft.Page):
    page.title = "PostgreSQL View Exporter"
    page.theme_mode = ft.ThemeMode.LIGHT
    page.padding = 20
    page.scroll = ft.ScrollMode.AUTO
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_loader = ConfigLoader()
    config = config_loader.load_config()
    available_views = config_loader.get_available_views()
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã UI
    db_host = ft.TextField(label="–•–æ—Å—Ç", value=config.db_host, width=200)
    db_port = ft.TextField(label="–ü–æ—Ä—Ç", value=config.db_port, width=100)
    db_name = ft.TextField(label="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value=config.db_name, width=200)
    db_user = ft.TextField(label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=config.db_user, width=200)
    db_password = ft.TextField(label="–ü–∞—Ä–æ–ª—å", value=config.db_password,
                              password=True, can_reveal_password=True, width=400)
    
    templates_folder = ft.TextField(label="–ü–∞–ø–∫–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏", 
                                   value=config.templates_folder, width=300, read_only=True)
    output_folder = ft.TextField(label="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 
                                value=config.output_folder, width=300, read_only=True)
    
    # Checkbox –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö
    select_all_checkbox = ft.Checkbox(
        label="–í—ã–±—Ä–∞—Ç—å –≤—Å–µ",
        value=False,
        on_change=lambda e: toggle_select_all(e)
    )
    
    # Checkbox –¥–ª—è –∫–∞–∂–¥–æ–≥–æ view —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
    view_checkboxes = []
    for view in available_views:
        view_config = config_loader.get_view_config(view)
        position_info = f" ({view_config.start_row},{view_config.start_col})" if view_config else ""
        view_checkboxes.append(
            ft.Checkbox(
                label=f"{view}{position_info}",
                value=False,
                data=view
            )
        )
    
    status_text = ft.Text("–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ", size=16, color=ft.Colors.GREEN)
    progress_ring = ft.ProgressRing(visible=False, width=20, height=20)
    progress_bar = ft.ProgressBar(visible=False, width=400)
    
    # File pickers
    def pick_templates_result(e: ft.FilePickerResultEvent):
        if e.path:
            templates_folder.value = e.path
            templates_folder.update()
    
    def pick_output_result(e: ft.FilePickerResultEvent):
        if e.path:
            output_folder.value = e.path
            output_folder.update()
    
    file_picker_templates = ft.FilePicker(on_result=pick_templates_result)
    file_picker_output = ft.FilePicker(on_result=pick_output_result)
    page.overlay.extend([file_picker_templates, file_picker_output])
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞/—Å–Ω—è—Ç–∏—è –≤—Å–µ—Ö
    def toggle_select_all(e):
        for checkbox in view_checkboxes:
            checkbox.value = select_all_checkbox.value
        page.update()
    
    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö view
    def get_selected_views():
        return [checkbox.data for checkbox in view_checkboxes if checkbox.value]
    
    # –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ–¥–Ω–æ–≥–æ view
    def export_single_view(view_name, templates_path, output_path):
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db_config = PostgreSQLConfig(
                host=db_host.value.strip(),
                database=db_name.value.strip(),
                user=db_user.value.strip(),
                password=db_password.value.strip(),
                port=int(db_port.value.strip()) if db_port.value.strip() else 5432
            )
            
            with PostgreSQLClient(db_config) as db_client:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                df = db_client.get_view_data(view_name)
                if df is None or df.empty:
                    return f"‚ùå {view_name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è view
                view_config = config_loader.get_view_config(view_name)
                if not view_config:
                    return f"‚ùå {view_name}: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞
                template_path = os.path.join(templates_path, view_config.template_name)
                if not os.path.exists(template_path):
                    return f"‚ùå {view_name}: —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                output_filename = config_loader.generate_output_filename(view_name)
                output_filepath = os.path.join(output_path, output_filename)
                
                # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π
                export_config = ExcelExportConfig(
                    template_path=template_path,
                    output_path=output_filepath,
                    sheet_name="Data",
                    start_row=view_config.start_row,
                    start_col=view_config.start_col,
                    auto_adjust_columns=config.auto_adjust_columns,
                    preserve_formatting=config.preserve_formatting
                )
                
                exporter = ExcelExporter(export_config)
                result = exporter.export_dataframe_to_template(df, clear_existing=True, include_headers=False)
                
                if result["success"]:
                    position_info = f" (–ø–æ–∑–∏—Ü–∏—è: {view_config.start_row},{view_config.start_col})"
                    return f"‚úÖ {view_name}: —É—Å–ø–µ—à–Ω–æ {position_info} ({result['records_count']} –∑–∞–ø–∏—Å–µ–π)"
                else:
                    return f"‚ùå {view_name}: –æ—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"
                    
        except Exception as e:
            return f"‚ùå {view_name}: {str(e)}"
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    def update_ui_status(message, color, show_progress=False, progress_value=None):
        status_text.value = message
        status_text.color = color
        progress_ring.visible = show_progress
        progress_bar.visible = show_progress
        if progress_value is not None:
            progress_bar.value = progress_value
        export_button.disabled = show_progress
        page.update()
    
    # –§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def export_in_thread():
        selected_views = get_selected_views()
        if not selected_views:
            update_ui_status("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω View –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", ft.Colors.RED)
            return
        
        templates_path = templates_folder.value.strip()
        output_path = output_folder.value.strip()
        
        if not all([templates_path, output_path]):
            update_ui_status("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫–∏ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", ft.Colors.RED)
            return
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        update_ui_status(f"‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç {len(selected_views)} view...", ft.Colors.ORANGE, True, 0)
        
        results = []
        total = len(selected_views)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –∫–∞–∂–¥–æ–≥–æ view
        for i, view_name in enumerate(selected_views):
            progress = (i + 1) / total
            update_ui_status(f"‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º {view_name} ({i+1}/{total})...", ft.Colors.ORANGE, True, progress)
            
            result = export_single_view(view_name, templates_path, output_path)
            results.append(result)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        success_count = sum(1 for r in results if r.startswith("‚úÖ"))
        error_count = sum(1 for r in results if r.startswith("‚ùå"))
        
        result_text = f"‚úÖ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}"
        color = ft.Colors.GREEN if error_count == 0 else ft.Colors.ORANGE
        
        update_ui_status(result_text, color, False, 1)
        show_results_dialog("\n".join(results))
    
    # –î–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    def show_results_dialog(results_text):
        def close_dialog(e):
            results_dialog.open = False
            page.update()
        
        results_dialog = ft.AlertDialog(
            title=ft.Text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞"),
            content=ft.Column(
                [
                    ft.Text("–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", weight=ft.FontWeight.BOLD),
                    ft.Text(results_text, selectable=True, size=14),
                ],
                tight=True,
                scroll=ft.ScrollMode.AUTO,
                height=300
            ),
            actions=[
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å", on_click=close_dialog)
            ],
            actions_alignment=ft.MainAxisAlignment.END
        )
        
        page.dialog = results_dialog
        results_dialog.open = True
        page.update()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    def start_export(e):
        # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å UI
        thread = threading.Thread(target=export_in_thread, daemon=True)
        thread.start()
    
    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_button = ft.ElevatedButton(
        "üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
        on_click=start_export,
        style=ft.ButtonStyle(
            bgcolor=ft.Colors.BLUE,
            color=ft.Colors.WHITE,
            padding=20
        ),
        width=400
    )
    
    # –°–±–æ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    page.add(
        ft.Text("PostgreSQL View ‚Üí Excel –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä", 
               size=24, weight=ft.FontWeight.BOLD),
        
        ft.Divider(),
        
        ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
        
        ft.Row([db_host, db_port]),
        ft.Row([db_name, db_user]),
        db_password,
        
        ft.Divider(),
        
        ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π", size=18, weight=ft.FontWeight.BOLD),
        
        ft.Row([
            templates_folder,
            ft.ElevatedButton(
                "–í—ã–±—Ä–∞—Ç—å",
                on_click=lambda _: file_picker_templates.get_directory_path()
            )
        ]),
        
        ft.Row([
            output_folder,
            ft.ElevatedButton(
                "–í—ã–±—Ä–∞—Ç—å",
                on_click=lambda _: file_picker_output.get_directory_path()
            )
        ]),
        
        ft.Divider(),
        
        ft.Text("–í—ã–±–æ—Ä View –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", size=18, weight=ft.FontWeight.BOLD),
        
        ft.Row([
            select_all_checkbox,
            ft.Text(f"–î–æ—Å—Ç—É–ø–Ω–æ: {len(available_views)} view", color=ft.Colors.GREY)
        ]),
        
        ft.Column(
            view_checkboxes,
            scroll=ft.ScrollMode.AUTO,
            height=200,
            width=400
        ),
        
        ft.Divider(),
        
        export_button,
        
        ft.Divider(),
        
        ft.Column([
            ft.Row([progress_ring, status_text], alignment=ft.MainAxisAlignment.CENTER),
            progress_bar
        ]),
        
        ft.Text("–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è (—Å—Ç—Ä–æ–∫–∞,—Å—Ç–æ–ª–±–µ—Ü) –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö", 
               size=12, color=ft.Colors.GREY)
    )

if __name__ == "__main__":
    ft.app(target=main)