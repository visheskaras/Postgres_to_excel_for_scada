import flet as ft
import pandas as pd
import psycopg2
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import os
from datetime import datetime

def main(page: ft.Page):
    page.title = "PostgreSQL View to Excel Exporter"
    page.theme_mode = ft.ThemeMode.LIGHT
    page.vertical_alignment = ft.MainAxisAlignment.START
    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER
    page.padding = 20
    page.scroll = ft.ScrollMode.AUTO

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    db_host = ft.Ref[ft.TextField]()
    db_port = ft.Ref[ft.TextField]()
    db_name = ft.Ref[ft.TextField]()
    db_user = ft.Ref[ft.TextField]()
    db_password = ft.Ref[ft.TextField]()
    view_name = ft.Ref[ft.TextField]()
    template_path = ft.Ref[ft.TextField]()
    output_path = ft.Ref[ft.TextField]()
    status_text = ft.Ref[ft.Text]()

    def pick_template_result(e: ft.FilePickerResultEvent):
        if e.files:
            template_path.current.value = e.files[0].path
            template_path.current.update()

    def pick_output_result(e: ft.FilePickerResultEvent):
        if e.files:
            output_path.current.value = e.files[0].path
            output_path.current.update()
        elif e.path:
            output_path.current.value = e.path
            output_path.current.update()

    file_picker_template = ft.FilePicker(on_result=pick_template_result)
    file_picker_output = ft.FilePicker(on_result=pick_output_result)
    page.overlay.extend([file_picker_template, file_picker_output])

    def export_data(e):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            host = db_host.current.value
            port = db_port.current.value or "5432"
            database = db_name.current.value
            username = db_user.current.value
            password = db_password.current.value
            view = view_name.current.value
            template = template_path.current.value
            output = output_path.current.value or f"output_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            if not all([host, database, username, password, view, template]):
                status_text.current.value = "‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!"
                status_text.current.color = ft.Colors.RED
                status_text.current.update()
                return

            if not os.path.exists(template):
                status_text.current.value = "‚ùå –§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                status_text.current.color = ft.Colors.RED
                status_text.current.update()
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status_text.current.value = "‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
            status_text.current.color = ft.Colors.ORANGE
            status_text.current.update()

            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
            conn = psycopg2.connect(
                host=host,
                port=port,
                database=database,
                user=username,
                password=password
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ view
            status_text.current.value = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ view..."
            status_text.current.update()

            query = f"SELECT * FROM {view};"
            df = pd.read_sql_query(query, conn)
            conn.close()

            if df.empty:
                status_text.current.value = "‚ö†Ô∏è View –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö!"
                status_text.current.color = ft.Colors.ORANGE
                status_text.current.update()
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            status_text.current.value = "‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω..."
            status_text.current.update()

            wb = load_workbook(template)
            ws = wb.active  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏)
            if ws.max_row > 1:
                ws.delete_rows(2, ws.max_row - 1)

            # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            status_text.current.value = "‚è≥ –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω..."
            status_text.current.update()

            start_row = 2  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
            for r_idx, row in enumerate(dataframe_to_rows(df, index=False, header=False), start_row):
                for c_idx, value in enumerate(row, 1):
                    ws.cell(row=r_idx, column=c_idx, value=value)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            status_text.current.value = "‚è≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª..."
            status_text.current.update()

            wb.save(output)

            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            status_text.current.value = f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!\n–§–∞–π–ª: {output}\n–ó–∞–ø–∏—Å–µ–π: {len(df)}"
            status_text.current.color = ft.Colors.GREEN
            status_text.current.update()

        except psycopg2.Error as e:
            status_text.current.value = f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}"
            status_text.current.color = ft.Colors.RED
            status_text.current.update()
        except Exception as e:
            status_text.current.value = f"‚ùå –û—à–∏–±–∫–∞: {e}"
            status_text.current.color = ft.Colors.RED
            status_text.current.update()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    page.add(
        ft.Text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL View –≤ Excel", 
               size=24, weight=ft.FontWeight.BOLD),
        
        ft.Divider(),
        
        ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL", size=18, weight=ft.FontWeight.BOLD),
        
        ft.Row([
            ft.TextField(ref=db_host, label="–•–æ—Å—Ç*", width=200, value="localhost"),
            ft.TextField(ref=db_port, label="–ü–æ—Ä—Ç", width=100, value="5432"),
        ]),
        
        ft.Row([
            ft.TextField(ref=db_name, label="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö*", width=200),
            ft.TextField(ref=db_user, label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*", width=200),
        ]),
        
        ft.TextField(ref=db_password, label="–ü–∞—Ä–æ–ª—å*", password=True, can_reveal_password=True, width=400),
        
        ft.Divider(),
        
        ft.Text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞", size=18, weight=ft.FontWeight.BOLD),
        
        ft.TextField(ref=view_name, label="–ò–º—è View*", width=400, hint_text="–Ω–∞–ø—Ä–∏–º–µ—Ä, sales_report"),
        
        ft.Row([
            ft.TextField(ref=template_path, label="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É*", width=300, read_only=True),
            ft.ElevatedButton(
                "–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω",
                icon=ft.Icons.FILE_OPEN,
                on_click=lambda _: file_picker_template.pick_files(
                    allowed_extensions=["xlsx", "xls"],
                    dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ Excel"
                )
            )
        ]),
        
        ft.Row([
            ft.TextField(ref=output_path, label="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è", width=300, 
                        hint_text="–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–∏–º–µ–Ω–∏"),
            ft.ElevatedButton(
                "–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                icon=ft.Icons.FOLDER_OPEN,
                on_click=lambda _: file_picker_output.get_directory_path(
                    dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
                )
            )
        ]),
        
        ft.Divider(),
        
        ft.ElevatedButton(
            "üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            on_click=export_data,
            style=ft.ButtonStyle(
                bgcolor=ft.Colors.BLUE,
                color=ft.Colors.WHITE,
                padding=20
            ),
            width=400
        ),
        
        ft.Divider(),
        
        ft.Text(ref=status_text, size=16, selectable=True, text_align=ft.TextAlign.CENTER),
        
        ft.Text("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø–æ–º–µ—á–µ–Ω—ã *", size=12, color=ft.Colors.GREY)
    )

if __name__ == "__main__":
    ft.app(target=main)